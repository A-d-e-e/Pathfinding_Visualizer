{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\pathfinding-visualizer\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// src/App.jsx\nimport React, { useState, useEffect } from 'react';\nimport Controls from './components/Controls';\nimport Node from './components/Node';\nimport { dfs, bfs, dijkstra, astar } from './algorithms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const rows = 20,\n    cols = 30;\n  const [grid, setGrid] = useState([]);\n  const [algorithm, setAlgorithm] = useState('DFS');\n  const [speed, setSpeed] = useState(50);\n  const [startCoord, setStartCoord] = useState('0,0');\n  const [endCoord, setEndCoord] = useState(`${rows - 1},${cols - 1}`);\n  const [statusMap, setStatusMap] = useState({}); // key=\"r-c\" → 'visited'|'path'|'start'|'end'\n\n  // 1) initialize grid\n  useEffect(() => {\n    const g = Array.from({\n      length: rows\n    }, (_, r) => Array.from({\n      length: cols\n    }, (_, c) => ({\n      row: r,\n      col: c,\n      isWall: false\n    })));\n    setGrid(g);\n  }, []);\n\n  // toggle wall on click\n  const toggleWall = (r, c) => {\n    setGrid(g => {\n      const g2 = g.map(row => row.map(c => ({\n        ...c\n      })));\n      g2[r][c].isWall = !g2[r][c].isWall;\n      return g2;\n    });\n  };\n\n  // random walls\n  const generateWalls = () => {\n    setGrid(g => g.map(row => row.map(c => ({\n      ...c,\n      isWall: Math.random() < 0.3\n    }))));\n  };\n\n  // clear all status & walls\n  const resetGrid = () => {\n    setStatusMap({});\n    setGrid(g => g.map(row => row.map(c => ({\n      ...c,\n      isWall: false\n    }))));\n  };\n\n  // parse \"r,c\" into [r,c]\n  const parseCoord = str => {\n    const [r, c] = str.split(',').map(x => parseInt(x, 10));\n    return [r, c];\n  };\n\n  // run and animate\n  const visualize = () => {\n    setStatusMap({});\n    const [sr, sc] = parseCoord(startCoord);\n    const [er, ec] = parseCoord(endCoord);\n    const algoFn = ({\n      grid,\n      start,\n      end\n    }) => {\n      switch (algorithm) {\n        case 'BFS':\n          return bfs({\n            grid,\n            start,\n            end\n          });\n        case 'Dijkstra':\n          return dijkstra({\n            grid,\n            start,\n            end\n          });\n        case 'AStar':\n          return astar({\n            grid,\n            start,\n            end\n          });\n        default:\n          return dfs({\n            grid,\n            start,\n            end\n          });\n      }\n    };\n    const {\n      visitedOrder,\n      path\n    } = algoFn({\n      grid,\n      start: {\n        r: sr,\n        c: sc\n      },\n      end: {\n        r: er,\n        c: ec\n      }\n    });\n\n    // animate visited\n    visitedOrder.forEach(({\n      r,\n      c\n    }, i) => {\n      setTimeout(() => {\n        setStatusMap(m => ({\n          ...m,\n          [`${r}-${c}`]: 'visited'\n        }));\n      }, speed * i);\n    });\n\n    // animate path after visits\n    const delay = speed * visitedOrder.length;\n    path.forEach(({\n      r,\n      c\n    }, i) => {\n      setTimeout(() => {\n        setStatusMap(m => ({\n          ...m,\n          [`${r}-${c}`]: 'path'\n        }));\n      }, delay + speed * i);\n    });\n\n    // mark start/end\n    setStatusMap(m => ({\n      ...m,\n      [`${sr}-${sc}`]: 'start',\n      [`${er}-${ec}`]: 'end'\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Controls, {\n      algorithm: algorithm,\n      setAlgorithm: setAlgorithm,\n      speed: speed,\n      setSpeed: setSpeed,\n      startCoord: startCoord,\n      setStartCoord: setStartCoord,\n      endCoord: endCoord,\n      setEndCoord: setEndCoord,\n      generateWalls: generateWalls,\n      resetGrid: resetGrid,\n      visualize: visualize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, ri) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map(cell => /*#__PURE__*/_jsxDEV(Node, {\n          cell: cell,\n          onToggleWall: toggleWall,\n          status: statusMap[`${cell.row}-${cell.col}`]\n        }, `${cell.row}-${cell.col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this))\n      }, ri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Th7hVBjNiipYwC+o2Ig2DmZSQAA=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Controls","Node","dfs","bfs","dijkstra","astar","jsxDEV","_jsxDEV","App","_s","rows","cols","grid","setGrid","algorithm","setAlgorithm","speed","setSpeed","startCoord","setStartCoord","endCoord","setEndCoord","statusMap","setStatusMap","g","Array","from","length","_","r","c","row","col","isWall","toggleWall","g2","map","generateWalls","Math","random","resetGrid","parseCoord","str","split","x","parseInt","visualize","sr","sc","er","ec","algoFn","start","end","visitedOrder","path","forEach","i","setTimeout","m","delay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ri","cell","onToggleWall","status","_c","$RefreshReg$"],"sources":["D:/Projects/pathfinding-visualizer/frontend/src/App.jsx"],"sourcesContent":["// src/App.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport Controls from './components/Controls';\r\nimport Node from './components/Node';\r\nimport { dfs, bfs, dijkstra, astar } from './algorithms';\r\n\r\nexport default function App() {\r\n  const rows = 20, cols = 30;\r\n  const [grid, setGrid] = useState([]);\r\n  const [algorithm, setAlgorithm] = useState('DFS');\r\n  const [speed, setSpeed] = useState(50);\r\n  const [startCoord, setStartCoord] = useState('0,0');\r\n  const [endCoord, setEndCoord] = useState(`${rows-1},${cols-1}`);\r\n  const [statusMap, setStatusMap] = useState({}); // key=\"r-c\" → 'visited'|'path'|'start'|'end'\r\n\r\n  // 1) initialize grid\r\n  useEffect(() => {\r\n    const g = Array.from({ length: rows }, (_, r) =>\r\n      Array.from({ length: cols }, (_, c) => ({ row: r, col: c, isWall: false }))\r\n    );\r\n    setGrid(g);\r\n  }, []);\r\n\r\n  // toggle wall on click\r\n  const toggleWall = (r, c) => {\r\n    setGrid(g => {\r\n      const g2 = g.map(row => row.map(c=>({...c})));\r\n      g2[r][c].isWall = !g2[r][c].isWall;\r\n      return g2;\r\n    });\r\n  };\r\n\r\n  // random walls\r\n  const generateWalls = () => {\r\n    setGrid(g =>\r\n      g.map(row =>\r\n        row.map(c => ({ ...c, isWall: Math.random() < 0.3 }))\r\n      )\r\n    );\r\n  };\r\n\r\n  // clear all status & walls\r\n  const resetGrid = () => {\r\n    setStatusMap({});\r\n    setGrid(g => g.map(row => row.map(c => ({ ...c, isWall: false }))));\r\n  };\r\n\r\n  // parse \"r,c\" into [r,c]\r\n  const parseCoord = str => {\r\n    const [r,c] = str.split(',').map(x=>parseInt(x,10));\r\n    return [r,c];\r\n  };\r\n\r\n  // run and animate\r\n  const visualize = () => {\r\n    setStatusMap({});\r\n    const [sr, sc] = parseCoord(startCoord);\r\n    const [er, ec] = parseCoord(endCoord);\r\n\r\n    const algoFn = ({grid,start,end}) => {\r\n      switch(algorithm) {\r\n        case 'BFS':     return bfs({grid,start,end});\r\n        case 'Dijkstra':return dijkstra({grid,start,end});\r\n        case 'AStar':   return astar({grid,start,end});\r\n        default:        return dfs({grid,start,end});\r\n      }\r\n    };\r\n\r\n    const { visitedOrder, path } = algoFn({\r\n      grid, start:{r:sr,c:sc}, end:{r:er,c:ec}\r\n    });\r\n\r\n    // animate visited\r\n    visitedOrder.forEach(({r,c}, i) => {\r\n      setTimeout(() => {\r\n        setStatusMap(m => ({ ...m, [`${r}-${c}`]:'visited' }));\r\n      }, speed * i);\r\n    });\r\n\r\n    // animate path after visits\r\n    const delay = speed * visitedOrder.length;\r\n    path.forEach(({r,c}, i) => {\r\n      setTimeout(() => {\r\n        setStatusMap(m => ({ ...m, [`${r}-${c}`]:'path' }));\r\n      }, delay + speed * i);\r\n    });\r\n\r\n    // mark start/end\r\n    setStatusMap(m => ({\r\n      ...m,\r\n      [`${sr}-${sc}`]:'start',\r\n      [`${er}-${ec}`]:'end'\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Controls\r\n        algorithm={algorithm} setAlgorithm={setAlgorithm}\r\n        speed={speed} setSpeed={setSpeed}\r\n        startCoord={startCoord} setStartCoord={setStartCoord}\r\n        endCoord={endCoord} setEndCoord={setEndCoord}\r\n        generateWalls={generateWalls}\r\n        resetGrid={resetGrid}\r\n        visualize={visualize}\r\n      />\r\n\r\n      <div className=\"grid\">\r\n        {grid.map((row, ri) => (\r\n          <div key={ri} className=\"grid-row\">\r\n            {row.map(cell => (\r\n              <Node\r\n                key={`${cell.row}-${cell.col}`}\r\n                cell={cell}\r\n                onToggleWall={toggleWall}\r\n                status={statusMap[`${cell.row}-${cell.col}`]}\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}